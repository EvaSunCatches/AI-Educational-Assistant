#!/bin/bash
echo "=== ü§ñ –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ AI Educational Assistant ==="

# 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
npm install @angular/forms @angular/common @angular/router @angular/animations --force

# 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º GeminiService
cat << 'EOC' > src/app/services/gemini.service.ts
import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class GeminiService {
  async askGemini(prompt: string): Promise<string> {
    console.log("GeminiService.askGemini() called with:", prompt);
    return Promise.resolve(`ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å Gemini: "${prompt.slice(0, 80)}..."`);
  }
}
EOC

# 3Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º ChatPanelComponent
cat << 'EOC' > src/app/components/chat-panel/chat-panel.component.ts
import { Component, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { GeminiService } from '../../services/gemini.service';

@Component({
  selector: 'app-chat-panel',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: \`
  <div class="chat-card">
    <h2>üí¨ AI –ü–æ–º—ñ—á–Ω–∏–∫</h2>
    <textarea [(ngModel)]="question" placeholder="–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è..." class="input"></textarea>
    <button (click)="sendQuestion()">–ù–∞–¥—ñ—Å–ª–∞—Ç–∏</button>
    <div *ngIf="reply()" class="reply">{{ reply() }}</div>
  </div>
  \`,
  styles: [\`
    .chat-card { max-width:600px; margin:40px auto; background:#f0f8ff; border-radius:12px; padding:20px; box-shadow:0 2px 10px rgba(0,0,0,0.1); }
    textarea.input { width:100%; height:120px; padding:10px; border-radius:8px; border:1px solid #ccc; margin-bottom:10px; }
    button { background:#0078d7; color:#fff; border:none; border-radius:6px; padding:10px 20px; cursor:pointer; }
    button:hover { background:#005fa3; }
    .reply { margin-top:16px; background:#fff; padding:12px; border-left:4px solid #0078d7; border-radius:8px; white-space:pre-line; }
  \`]
})
export class ChatPanelComponent {
  question = signal<string>('');
  reply = signal<string>('');

  constructor(private gemini: GeminiService) {}

  async sendQuestion() {
    const q = this.question().trim();
    if (!q) return;
    this.reply.set('üîÑ –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É...');
    const res = await this.gemini.askGemini(q);
    this.reply.set(res);
  }
}
EOC

# 4Ô∏è‚É£ –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
cat << 'EOC' > src/app/app.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ChatPanelComponent } from './components/chat-panel/chat-panel.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, ChatPanelComponent],
  template: \`
    <header style="background:#2563eb;color:white;padding:20px;border-radius:0 0 12px 12px;box-shadow:0 2px 6px rgba(0,0,0,0.2);">
      <h1 style="margin:0;font-size:1.8rem;">AI –ü–æ–º—ñ—á–Ω–∏–∫ ‚Äî 5-–π –∫–ª–∞—Å üá∫üá¶</h1>
      <p style="margin:0;font-size:1rem;opacity:0.9;">–ü–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é</p>
    </header>
    <main><app-chat-panel></app-chat-panel></main>
  \`
})
export class AppComponent {}
EOC

# 5Ô∏è‚É£ main.ts
cat << 'EOC' > src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
bootstrapApplication(AppComponent).catch(err => console.error(err));
EOC

# 6Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π
echo "=== ‚öôÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ==="
rm -rf dist .angular
npx ng build --configuration production --base-href "/AI-Educational-Assistant/"

echo "=== üì¶ –ö–æ–º–º–∏—Ç –∏ –ø—É—à –≤ main ==="
git add .
git commit -m "Auto full deploy $(date)" || true
git push origin main

echo "=== üåê –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ GitHub Pages ==="
npx angular-cli-ghpages --dir=dist/ai-educational-assistant-for-5th-grade --no-silent

echo "‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å —Å–∞–π—Ç:"
echo "üîó https://evasuncatches.github.io/AI-Educational-Assistant/"
