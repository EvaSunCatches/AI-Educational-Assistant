#!/usr/bin/env bash
set -euo pipefail

echo "=== 0) –ü—É—Ç—å –∑–∞–ø—É—Å–∫–∞: $(pwd) ==="

# 1) –ë—ç–∫–∞–ø —Ç–µ–∫—É—â–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
mkdir -p repair_backup
echo "Backing up existing files (if present) -> repair_backup/"
cp -v src/app/app.module.ts src/app/app.component.ts src/app/app.component.html src/app/app.component.css \
      src/app/components/chat-panel/chat-panel.component.ts src/app/services/gemini.service.ts src/main.ts \
      repair_backup/ 2>/dev/null || true

# 2) –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ –µ—Å—Ç—å
mkdir -p src/app/components/chat-panel
mkdir -p src/app/services
mkdir -p src/assets

# 3) –£–¥–∞–ª–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è (–ø–µ—Ä–µ–Ω–µ—Å—ë–º –≤ –±—ç–∫–∞–ø)
if [ -f src/app.component.ts ]; then
  echo "Moving stray src/app.component.ts -> repair_backup/"
  mv src/app.component.ts repair_backup/app.component.ts.bak
fi

if [ -f src/index.css ]; then
  echo "Removing stray src/index.css (we use src/styles.css)"
  rm -f src/index.css
fi

# 4) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π GeminiService (–¥–µ–º–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –ø–æ–∑–∂–µ)
cat > src/app/services/gemini.service.ts <<'TS'
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class GeminiService {
  constructor() {}

  async askGemini(subject: string, text: string): Promise<string> {
    // –î–µ–º–æ–≤–µ—Ä—Å–∏—è ‚Äî –≤–µ—Ä–Ω—ë—Ç –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API.
    return Promise.resolve(
      `‚ö†Ô∏è –î–µ–º–æ-–≤—ñ–¥–ø–æ–≤—ñ–¥—å (–Ω–µ–º–∞—î API-–∫–ª—é—á–∞).\n–ü—Ä–µ–¥–º–µ—Ç: ${subject}\n\n–ó–∞–ø–∏—Ç:\n${text}`
    );
  }

  async solveFromUrl(subject: string): Promise<string> {
    const url = prompt('–í—Å—Ç–∞–≤—Ç–µ URL –∑–∞–≤–¥–∞–Ω–Ω—è (–¥–µ–º–æ):');
    if (!url) return '‚ö†Ô∏è –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–µ.';
    return this.askGemini(subject, `–†–æ–∑–≤'—è–∂–∏ –∑–∞–¥–∞—á—É –∑ URL: ${url}`);
  }

  async solveFromImage(subject: string): Promise<string> {
    const b64 = prompt('–í—Å—Ç–∞–≤—Ç–µ base64-–∫–æ–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–¥–µ–º–æ):');
    if (!b64) return '‚ö†Ô∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥–∞–Ω–æ.';
    return this.askGemini(subject, `–†–æ–∑–≤'—è–∂–∏ –∑–∞–¥–∞—á—É –∑—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (base64).`);
  }
}
TS

# 5) ChatPanelComponent (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω; –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç [(ngModel)] –∏ –∫–Ω–æ–ø–∫–∏)
cat > src/app/components/chat-panel/chat-panel.component.ts <<'TS'
import { Component } from '@angular/core';
import { GeminiService } from '../../services/gemini.service';

@Component({
  selector: 'app-chat-panel',
  template: \`
  <div class="card">
    <h2>AI –ü–æ–º—ñ—á–Ω–∏–∫ (5 –∫–ª–∞—Å)</h2>

    <label>–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è</label>
    <textarea [(ngModel)]="question" placeholder="–û–ø–∏—à—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è..."></textarea>

    <label>–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç</label>
    <select [(ngModel)]="subject">
      <option>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞</option>
      <option>–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞</option>
      <option>–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏</option>
    </select>

    <div class="controls">
      <button (click)="ask()">üìò –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É</button>
      <button (click)="solveUrl()">üåê –†–æ–∑–≤'—è–∑–∞—Ç–∏ –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é</button>
      <button (click)="solveImage()">üñºÔ∏è –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</button>
      <input type="file" (change)="onFileSelected($event)" />
    </div>

    <div class="reply" *ngIf="reply">{{ reply }}</div>
  </div>
  \`,
  styles: [\`
    .card { max-width:800px; margin:20px auto; padding:18px; border-radius:12px; background:#ffffffd9; box-shadow:0 8px 24px rgba(0,0,0,0.06); }
    textarea { width:100%; min-height:120px; padding:10px; border-radius:8px; margin-top:8px; }
    select { width:100%; padding:8px; margin-top:8px; border-radius:6px; }
    .controls { margin-top:12px; }
    button { margin-right:8px; padding:8px 12px; border-radius:8px; cursor:pointer; }
    .reply { margin-top:14px; padding:12px; background:#f8fafc; border-left:4px solid #0284c7; white-space:pre-wrap; border-radius:6px; }
  \`]
})
export class ChatPanelComponent {
  question = '';
  reply = '';
  subject = '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞';

  constructor(private gemini: GeminiService) {}

  async ask() {
    this.reply = '‚è≥ –û–±—Ä–æ–±–∫–∞...';
    this.reply = await this.gemini.askGemini(this.subject, this.question);
  }

  async solveUrl() {
    this.reply = '‚è≥ –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è...';
    this.reply = await this.gemini.solveFromUrl(this.subject);
  }

  async solveImage() {
    this.reply = '‚è≥ –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...';
    this.reply = await this.gemini.solveFromImage(this.subject);
  }

  onFileSelected(event: any) {
    const f = event.target.files?.[0];
    if (!f) return;
    this.reply = \`üì∏ –§–∞–π–ª "\${f.name}" –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (–¥–µ–º–æ). –î–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ base64 —É —Å–µ—Ä–≤—ñ—Å.\`;
  }
}
TS

# 6) AppComponent (—à–∞–ø–∫–∞ + router-outlet)
cat > src/app/app.component.ts <<'TS'
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: \`
    <header style="background:linear-gradient(90deg,#93c5fd,#fde68a);padding:14px;color:#042c58">
      <div style="max-width:1000px;margin:0 auto;display:flex;align-items:center;gap:12px">
        <img src="assets/avatar.png" alt="avatar" style="width:54px;height:54px;border-radius:50%;object-fit:cover" onerror="this.style.display='none'">
        <div>
          <div style="font-weight:600">AI –ü–æ–º—ñ—á–Ω–∏–∫ ‚Äî 5-–π –∫–ª–∞—Å</div>
          <div style="font-size:0.85rem;opacity:0.85">–ü–æ—è—Å–Ω–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é</div>
        </div>
      </div>
    </header>
    <main style="padding:20px">
      <router-outlet></router-outlet>
    </main>
  \`
})
export class AppComponent {}
TS

# 7) AppRoutingModule (–≥–ª–∞–≤–Ω–∞—è ‚Äî ChatPanelComponent)
cat > src/app/app-routing.module.ts <<'TS'
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ChatPanelComponent } from './components/chat-panel/chat-panel.component';

const routes: Routes = [
  { path: '', component: ChatPanelComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}
TS

# 8) AppModule (FormsModule –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω; ChatPanelComponent –∏ AppComponent –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã)
cat > src/app/app.module.ts <<'TS'
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { AppComponent } from './app.component';
import { ChatPanelComponent } from './components/chat-panel/chat-panel.component';
import { AppRoutingModule } from './app-routing.module';
import { GeminiService } from './services/gemini.service';

@NgModule({
  declarations: [AppComponent, ChatPanelComponent],
  imports: [BrowserModule, FormsModule, AppRoutingModule],
  providers: [GeminiService],
  bootstrap: [AppComponent]
})
export class AppModule {}
TS

# 9) main.ts (bootstrap —á–µ—Ä–µ–∑ AppModule)
cat > src/main.ts <<'TS'
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
TS

# 10) –ü—Ä–æ—Å—Ç–µ–π—à–∏–π styles.css (–ø–æ–¥–∫–ª—é—á—ë–Ω –≤ angular.json)
cat > src/styles.css <<'CSS'
/* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å Tailwind –ø–æ–∑–∂–µ) */
:root { --accent: #0078d7; --bg: #f0f8ff; --card:#ffffffd9; }
body { margin:0; font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; background:var(--bg); color:#042c58; }
CSS

# 11) –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ / –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏
rm -rf dist .angular node_modules/.cache || true

# 12) –û–±–Ω–æ–≤–∏–º angular.json —Å—Ç–∏–ª–∏ –∏ assets (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç)
# (–∏—Å–ø–æ–ª—å–∑—É–µ–º npx ng config, –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–∏–ª–¥)
npx ng config projects.app.architect.build.options.styles '["src/styles.css"]' 2>/dev/null || true
npx ng config projects.app.architect.build.options.assets '["src/assets"]' 2>/dev/null || true

# 13) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
npm install

# 14) –°–±–æ—Ä–∫–∞ production
echo "=== Building production (ng build --configuration production) ==="
npx ng build --configuration production

echo "=== Build finished. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É dist/ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: npx http-server dist) ==="
